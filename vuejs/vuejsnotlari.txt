-- vuejs

--- IFTT işe yarar bir link----

<!-- development version, includes helpful console warnings -->
<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>

HTML'deki view template olarak geçiyor.

<div id="app">
<p>{{title}}
<h1>{{description}}</h1>
<input type="text" v-on:input="changeTitle"/>
</p>
 </div>

Javascript dosyasında bir vue örneği oluşturuyoruz.
el: render edeceği dosyayı söylüyoruz.
new vue({
    el:"#app"
    data:{
        title:"Hello World",
        description:"açıklama",
    },
    methods:{
        changeTitle:function(event){// Bir anahtar girdik.
        // Bu sayade input değiştiği zaman description'ı değiştirdik
            this.description= event.target.value;
        }
    }
});

vuejs direk olarak html'e müdahale etmez dolaylı olarak müdahale eder


new vue({
    el:"#app"
    data:{
        title:"Hello World",
        description:"açıklama",
    },
    methods:{
        mesaj:function(event){// Bir anahtar girdik.
        // Bu sayade input değiştiği zaman description'ı değiştirdik
            this.description= event.target.value;
        }
    }
});

HTML dosyasından methodu çağırmak için {{mesaj()}} yapısını kullanıyoruz.
<div id="app">
<p>{{mesaj()}}

</p>
 </div>

 İstediğimiz etiketin attribute'ünü değiştirmek için rebind ederiz.

 <div id="app">
<a href="v-bind:href="link"> </a>
<p v-once> {{mesaj()}}</p>
 </div>
 new vue({
    el:"#app"
    data:{
        title:"Hello World",
        description:"açıklama",
        link:"htttps://....."
    },
    methods:{
        mesaj:function(event){// Bir anahtar girdik.
        // Bu sayade input değiştiği zaman description'ı değiştirdik
            this.description= event.target.value;
        }
    }
});

Değiştirilmesini istemediğim nesneyi v-once kullanıyoruz. İlk tanımladığımız halini kullanıyor.
 <div id="app">
<p v-html="bloklink"> </p>
<button v-on:click="increasecounter">artır</button>
 </div>
 new vue({
    el:"#app"
    data:{
        title:"Hello World",
        description:"açıklama",
        link:"htttps://.....",
        bloklink:"<a href="https://...">Link</a>",
        counter:0
    },
    methods:{
        mesaj:function(event){// Bir anahtar girdik.
        // Bu sayade input değiştiği zaman description'ı değiştirdik
            this.description= event.target.value;
        },
        increasecounter:function(){
            this.counter+=2;
        }
    
    }
});

Klavyeden bir tuşu takip etmek için v-on:keyup kullanırız. Örneğin; v-on:keyup.enter.space

v-model: içindeki datanın değiştiği bir yapı düşünelim. v-model eklediğimiz tag i sürekli takip eder. Oradaki değişimeri takip eder. Örneğin;<input type="text" v-model="name">



Computed Properties
Kodu analiz ediyor ihtiyaca göre çalıştırıyor. 
<div id="example">
  <p>Original message: "{{ message }}"</p>
  <p>Computed reversed message: "{{ reversedMessage }}"</p>
</div>

var vm = new Vue({
  el: '#example',
  data: {
    message: 'Hello'
  },
  computed: {
    // a computed getter
    reversedMessage: function () {
      // `this` points to the vm instance
      return this.message.split('').reverse().join('')
    }
  }
})


Butonları kullanarak değer artırıp azaltma işleminde Computed kullandık
<!DOCTYPE html>
<html lang="en">

<head>

    <title>Document</title>
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <!-- Vue-->
</head>

<body>

    <div id="app">
        <button v-on:click="counter++">Arttır</button>
        <button v-on:click="counter--">azalt</button>
        <button v-on:click="secondCounter++">2.Counter</button>
        <p> Counter: {{counter}} | {{secondCounter}}</p>
        <p>{{result()}} | {{output}}</p>

    </div>

    <script>
        new Vue({
            el: "#app",
            data: {
                counter: 0,

                secondCounter: 0
            },
            methods: {
                result: function() {
                    console.log("method çalışıt");
                    return this.counter > 10 ? "10dan büyüktür" : "10dan küçüktür"
                }
            },
            computed: {
                output: function() {
                    return this.secondCounter > 10 ? "10dan büyüktür" : "10dan küçüktür"
                }
            }
        })
    </script>

</body>
